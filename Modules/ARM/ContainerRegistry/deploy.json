{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "acrName": {
      "type": "string",
      "minLength": 5,
      "maxLength": 50,
      "metadata": {
        "description": "Required. Name of your Azure Container Registry"
      }
    },
    "acrAdminUserEnabled": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Optional. Enable admin user that have push / pull permission to the registry."
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Optional. Location for all resources."
      }
    },
    "roleAssignments": {
      "defaultValue": [
      ],
      "type": "array",
      "metadata": {
        "description": "Optional. Array of role assignment objects that contain the 'roleDefinitionIdOrName' and 'principalId' to define RBAC role assignments on this resource. In the roleDefinitionIdOrName attribute, you can provide either the display name of the role definition, or it's fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'"
      }
    },
    "privateEndpoints": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "Optional. Configuration Details for private endpoints."
      }
    },
    "acrSku": {
      "type": "string",
      "metadata": {
        "description": "Optional. Tier of your Azure Container Registry."
      },
      "defaultValue": "Basic",
      "allowedValues": [
        "Basic",
        "Standard",
        "Premium"
      ]
    },
    "quarantinePolicyStatus": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. The value that indicates whether the policy is enabled or not."
      }
    },
    "trustPolicyStatus": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. The value that indicates whether the policy is enabled or not."
      }
    },
    "retentionPolicyStatus": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. The value that indicates whether the policy is enabled or not."
      }
    },
    "retentionPolicyDays": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. The number of days to retain an untagged manifest after which it gets purged."
      }
    },
    "dataEndpointEnabled": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Optional. Enable a single data endpoint per region for serving data. Not relevant in case of disabled public access."
      }
    },
    "publicNetworkAccess": {
      "type": "string",
      "defaultValue": "Enabled",
      "metadata": {
        "description": "Optional. Whether or not public network access is allowed for the container registry. - Enabled or Disabled"
      }
    },
    "networkRuleBypassOptions": {
      "type": "string",
      "defaultValue": "AzureServices",
      "metadata": {
        "description": "Optional. Whether to allow trusted Azure services to access a network restricted registry. Not relevant in case of public access. - AzureServices or None"
      }
    },
    "lockForDeletion": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Optional. Switch to lock containter registry from deletion."
      }
    },
    "tags": {
      "type": "object",
      "defaultValue": {
      },
      "metadata": {
        "description": "Optional. Tags of the resource."
      }
    },
    "cuaId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. Customer Usage Attribution id (GUID). This GUID must be previously registered"
      }
    },
    // Diagnostic Settings
    "diagnosticSettingName": {
      "type": "string",
      "defaultValue": "service",
      "metadata": {
        "description": "Optional. The name of the Diagnostic setting."
      }
    },
    "diagnosticLogsRetentionInDays": {
      "type": "int",
      "defaultValue": 365,
      "minValue": 0,
      "maxValue": 365,
      "metadata": {
        "description": "Optional. Specifies the number of days that logs will be kept for; a value of 0 will retain data indefinitely."
      }
    },
    "diagnosticStorageAccountId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. Resource identifier of the Diagnostic Storage Account."
      }
    },
    "workspaceId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. Resource identifier of Log Analytics."
      }
    },
    "eventHubAuthorizationRuleId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. Resource ID of the event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
      }
    },
    "eventHubName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. Name of the event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category."
      }
    }
  },
  "variables": {
    "cleanAcrName": "[replace(tolower(parameters('acrName')), '-', '')]",
    "builtInRoleNames": {
      "AcrDelete": "/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11",
      "AcrImageSigner": "/providers/Microsoft.Authorization/roleDefinitions/6cef56e8-d556-48e5-a04f-b8e64114680f",
      "AcrPull": "/providers/Microsoft.Authorization/roleDefinitions/7f951dda-4ed3-4680-a7ca-43fe172d538d",
      "AcrPush": "/providers/Microsoft.Authorization/roleDefinitions/8311e382-0749-4cb8-b61a-304f252e45ec",
      "AcrQuarantineReader": "/providers/Microsoft.Authorization/roleDefinitions/cdda3590-29a3-44f6-95f2-9f980659eb04",
      "AcrQuarantineWriter": "/providers/Microsoft.Authorization/roleDefinitions/c8d4ff99-41c3-41a8-9f60-21dfdad59608",
      "Contributor": "/providers/Microsoft.Authorization/roleDefinitions/b24988ac-6180-42a0-ab88-20f7382dd24c",
      "Log Analytics Contributor": "/providers/Microsoft.Authorization/roleDefinitions/92aaf0da-9dab-42b6-94a3-d43ce8d16293",
      "Log Analytics Reader": "/providers/Microsoft.Authorization/roleDefinitions/73c42c96-874c-492b-b04d-ab87d138a893",
      "Managed Application Contributor Role": "/providers/Microsoft.Authorization/roleDefinitions/641177b8-a67a-45b9-a033-47bc880bb21e",
      "Managed Application Operator Role": "/providers/Microsoft.Authorization/roleDefinitions/c7393b34-138c-406f-901b-d8cf2b17e6ae",
      "Managed Applications Reader": "/providers/Microsoft.Authorization/roleDefinitions/b9331d33-8a36-4f8c-b097-4f54124fdb44",
      "Monitoring Contributor": "/providers/Microsoft.Authorization/roleDefinitions/749f88d5-cbae-40b8-bcfc-e573ddc772fa",
      "Monitoring Metrics Publisher": "/providers/Microsoft.Authorization/roleDefinitions/3913510d-42f4-4e42-8a64-420c390055eb",
      "Monitoring Reader": "/providers/Microsoft.Authorization/roleDefinitions/43d0d8ad-25c7-4714-9337-8ba259a9fe05",
      "Owner": "/providers/Microsoft.Authorization/roleDefinitions/8e3af657-a8ff-443c-a75c-2fe8c4bcb635",
      "Reader": "/providers/Microsoft.Authorization/roleDefinitions/acdd72a7-3385-48ef-bd42-f606fba81ae7",
      "Resource Policy Contributor": "/providers/Microsoft.Authorization/roleDefinitions/36243c78-bf99-498c-9df9-86d9f8d28608",
      "User Access Administrator": "/providers/Microsoft.Authorization/roleDefinitions/18d7d88d-d35e-4fb5-a5c3-7773c20a72d9"
    },
    "diagnosticsMetrics": [
      {
        "category": "AllMetrics",
        "timeGrain": null,
        "enabled": true,
        "retentionPolicy": {
          "enabled": true,
          "days": "[parameters('diagnosticLogsRetentionInDays')]"
        }
      }
    ],
    "diagnosticsLogs": [
      {
        "category": "ContainerRegistryRepositoryEvents",
        "enabled": true,
        "retentionPolicy": {
          "enabled": true,
          "days": "[parameters('diagnosticLogsRetentionInDays')]"
        }
      },
      {
        "category": "ContainerRegistryLoginEvents",
        "enabled": true,
        "retentionPolicy": {
          "enabled": true,
          "days": "[parameters('diagnosticLogsRetentionInDays')]"
        }
      }
    ]
  },
  "resources": [
    {
      "condition": "[not(empty(parameters('cuaId')))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-06-01",
      "name": "[concat('pid-', parameters('cuaId'))]",
      "properties": {
        "mode": "Incremental",
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "resources": [
          ]
        }
      }
    },
    {
      "name": "[variables('cleanAcrName')]",
      "type": "Microsoft.ContainerRegistry/registries",
      "apiVersion": "2020-11-01-preview",
      "location": "[parameters('location')]",
      "comments": "Container registry for storing docker images",
      "tags": "[parameters('tags')]",
      "sku": {
        "name": "[parameters('acrSku')]"
      },
      "properties": {
        "adminUserEnabled": "[parameters('acrAdminUserEnabled')]",
        "policies": {
          "quarantinePolicy": {
            "status": "[if(empty(parameters('quarantinePolicyStatus')), json('null'), parameters('quarantinePolicyStatus'))]"
          },
          "trustPolicy": {
            "type": "Notary",
            "status": "[if(empty(parameters('trustPolicyStatus')), json('null'), parameters('trustPolicyStatus'))]"
          },
          "retentionPolicy": {
            "days": "[if(empty(parameters('retentionPolicyDays')), json('null'), parameters('retentionPolicyDays'))]",
            "status": "[if(empty(parameters('retentionPolicyStatus')), json('null'), parameters('retentionPolicyStatus'))]"
          }
        },
        "dataEndpointEnabled": "[parameters('dataEndpointEnabled')]",
        "publicNetworkAccess": "[parameters('publicNetworkAccess')]",
        "networkRuleBypassOptions": "[parameters('networkRuleBypassOptions')]"
      },
      "resources": [
        {
          "type": "providers/locks",
          "apiVersion": "2016-09-01",
          "condition": "[parameters('lockForDeletion')]",
          "name": "Microsoft.Authorization/azureContainerRegistryDoNotDelete",
          "dependsOn": [
            "[resourceId('Microsoft.ContainerRegistry/registries', variables('cleanAcrName'))]"
          ],
          "comments": "Resource lock on the Container Registry",
          "properties": {
            "level": "CannotDelete"
          }
        },
        // Diagnostic settings
        {
          "type": "Microsoft.ContainerRegistry/registries/providers/diagnosticsettings",
          "apiVersion": "2017-05-01-preview",
          "name": "[concat(variables('cleanAcrName'), '/Microsoft.Insights/', parameters('diagnosticSettingName'))]",
          "condition": "[or(not(empty(parameters('diagnosticStorageAccountId'))),not(empty(parameters('workspaceId'))),not(empty(parameters('eventHubAuthorizationRuleId'))),not(empty(parameters('eventHubName'))))]",
          "dependsOn": [
            "[concat('Microsoft.ContainerRegistry/registries/', variables('cleanAcrName'))]"
          ],
          "properties": {
            "storageAccountId": "[if(empty(parameters('diagnosticStorageAccountId')), json('null'), parameters('diagnosticStorageAccountId'))]",
            "workspaceId": "[if(empty(parameters('workspaceId')), json('null'), parameters('workspaceId'))]",
            "eventHubAuthorizationRuleId": "[if(empty(parameters('eventHubAuthorizationRuleId')), json('null'), parameters('eventHubAuthorizationRuleId'))]",
            "eventHubName": "[if(empty(parameters('eventHubName')), json('null'), parameters('eventHubName'))]",
            "metrics": "[if(and(empty(parameters('diagnosticStorageAccountId')), empty(parameters('workspaceId')), empty(parameters('eventHubAuthorizationRuleId')), empty(parameters('eventHubName'))), json('null'), variables('diagnosticsMetrics'))]",
            "logs": "[if(and(empty(parameters('diagnosticStorageAccountId')), empty(parameters('workspaceId')), empty(parameters('eventHubAuthorizationRuleId')), empty(parameters('eventHubName'))), json('null'), variables('diagnosticsLogs'))]"
          }
        }
      ]
    },
    // ACR RBAC
    {
      "name": "[concat('AcrRbacDeplCopy-', copyIndex())]",
      "apiVersion": "2020-06-01",
      "type": "Microsoft.Resources/deployments",
      "condition": "[not(empty(parameters('roleAssignments')))]",
      "dependsOn": [
        "[variables('cleanAcrName')]"
      ],
      "copy": {
        "name": "AcrRbacDeplCopy",
        "count": "[length(parameters('roleAssignments'))]"
      },
      "properties": {
        "mode": "Incremental",
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "parameters": {
          "roleAssignment": {
            "value": "[parameters('roleAssignments')[copyIndex()]]"
          },
          "builtInRoleNames": {
            "value": "[variables('builtInRoleNames')]"
          },
          "cleanAcrName": {
            "value": "[variables('cleanAcrName')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "parameters": {
            "roleAssignment": {
              "type": "object"
            },
            "builtInRoleNames": {
              "type": "object"
            },
            "cleanAcrName": {
              "type": "string"
            }
          },
          "resources": [
            {
              "type": "Microsoft.ContainerRegistry/registries/providers/roleAssignments",
              "apiVersion": "2020-04-01-preview",
              "name": "[concat(parameters('cleanAcrName'), '/Microsoft.Authorization/', guid(parameters('cleanAcrName'), array(parameters('roleAssignment').principalIds)[copyIndex('AcrInnerRbacCopy')], parameters('roleAssignment').roleDefinitionIdOrName ))]",
              "dependsOn": [
              ],
              "copy": {
                "name": "AcrInnerRbacCopy",
                "count": "[length(parameters('roleAssignment').principalIds)]"
              },
              "properties": {
                "roleDefinitionId": "[if(contains(parameters('builtInRoleNames'), parameters('roleAssignment').roleDefinitionIdOrName ), parameters('builtInRoleNames')[parameters('roleAssignment').roleDefinitionIdOrName] , parameters('roleAssignment').roleDefinitionIdOrName )]",
                "principalId": "[array(parameters('roleAssignment').principalIds)[copyIndex()]]"
              }
            }
          ]
        }
      }
    },
    // Private Endpoints
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-06-01",
      "name": "[concat(uniqueString(deployment().name, parameters('location')), '-ContainerRegistry-PrivateEndpoints','-',copyIndex())]",
      "condition": "[not(empty(parameters('privateEndpoints')))]",
      "dependsOn": [
        "[variables('cleanAcrName')]"
      ],
      "copy": {
        "name": "privateEndpointsCopy",
        "count": "[length(parameters('privateEndpoints'))]"
      },
      "properties": {
        "mode": "Incremental",
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "parameters": {
          "privateEndpointResourceId": {
            "value": "[resourceId('Microsoft.ContainerRegistry/registries', variables('cleanAcrName'))]"
          },
          "privateEndpointVnetLocation": {
            "value": "[if(empty(parameters('privateEndpoints')),'dummy',reference(split(parameters('privateEndpoints')[copyIndex()].subnetResourceId,'/subnets/')[0],'2020-06-01', 'Full').location)]"
          },
          "privateEndpoint": {
            "value": "[parameters('privateEndpoints')[copyIndex()]]"
          },
          "tags": {
            "value": "[parameters('tags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "parameters": {
            "privateEndpointResourceId": {
              "type": "string"
            },
            "privateEndpointVnetLocation": {
              "type": "string"
            },
            "privateEndpoint": {
              "type": "object"
            },
            "tags": {
              "type": "object"
            }
          },
          "variables": {
            "privateEndpointResourceName": "[last(split(parameters('privateEndpointResourceId'),'/'))]",
            "privateEndpoint": {
              "name": "[if(contains(parameters('privateEndpoint'), 'name'),if(empty(parameters('privateEndpoint').name),concat(variables('privateEndpointResourceName'),'-',parameters('privateEndpoint').service),parameters('privateEndpoint').name),concat(variables('privateEndpointResourceName'),'-',parameters('privateEndpoint').service))]",
              "subnetResourceId": "[parameters('privateEndpoint').subnetResourceId]",
              "service": [
                "[parameters('privateEndpoint').service]"
              ],
              "privateDnsZoneResourceIds": "[if(contains(parameters('privateEndpoint'), 'privateDnsZoneResourceIds'),if(empty(parameters('privateEndpoint').privateDnsZoneResourceIds),createArray(),parameters('privateEndpoint').privateDnsZoneResourceIds),createArray())]",
              "customDnsConfigs": "[if(contains(parameters('privateEndpoint'), 'customDnsConfigs'),if(empty(parameters('privateEndpoint').customDnsConfigs),json('null'),parameters('privateEndpoint').customDnsConfigs),json('null'))]"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Network/privateEndpoints",
              "apiVersion": "2020-05-01",
              "name": "[variables('privateEndpoint').name]",
              "location": "[parameters('privateEndpointVnetLocation')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "privateLinkServiceConnections": [
                  {
                    "name": "[variables('privateEndpoint').name]",
                    "properties": {
                      "privateLinkServiceId": "[parameters('privateEndpointResourceId')]",
                      "groupIds": "[variables('privateEndpoint').service]"
                    }
                  }
                ],
                "manualPrivateLinkServiceConnections": [],
                "subnet": {
                  "id": "[variables('privateEndpoint').subnetResourceId]"
                },
                "customDnsConfigs": "[variables('privateEndpoint').customDnsConfigs]"
              }
            },
            {
              "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
              "apiVersion": "2020-05-01",
              "condition": "[not(empty(variables('privateEndpoint').privateDnsZoneResourceIds))]",
              "name": "[concat(variables('privateEndpoint').name, '/default')]",
              "dependsOn": [
                "[resourceId('Microsoft.Network/privateEndpoints', variables('privateEndpoint').name)]"
              ],
              "properties": {
                "copy": [
                  {
                    "name": "privateDnsZoneConfigs",
                    "count": "[length(variables('privateEndpoint').privateDnsZoneResourceIds)]",
                    "input": {
                      "name": "[last(split(variables('privateEndpoint').privateDnsZoneResourceIds[copyIndex('privateDnsZoneConfigs')],'/'))]",
                      "properties": {
                        "privateDnsZoneId": "[variables('privateEndpoint').privateDnsZoneResourceIds[copyIndex('privateDnsZoneConfigs')]]"
                      }
                    }
                  }
                ]
              }
            }
          ]
        }
      }
    }
  ],
  "functions": [],
  "outputs": {
    "acrName": {
      "type": "string",
      "value": "[variables('cleanAcrName')]",
      "metadata": {
        "description": "The Name of the Azure Container Registry."
      }
    },
    "acrLoginServer": {
      "value": "[reference(resourceId('Microsoft.ContainerRegistry/registries',variables('cleanAcrName')),'2019-05-01').loginServer]",
      "type": "string",
      "metadata": {
        "description": "The reference to the Azure Container Registry."
      }
    },
    "acrResourceGroup": {
      "value": "[resourceGroup().name]",
      "type": "string",
      "metadata": {
        "description": "The name of the Resource Group the Azure Container Registry was created in."
      }
    },
    "acrResourceId": {
      "value": "[resourceId('Microsoft.ContainerRegistry/registries',variables('cleanAcrName'))]",
      "type": "string",
      "metadata": {
        "description": "The Resource Id of the Azure Container Registry."
      }
    }
  }
}